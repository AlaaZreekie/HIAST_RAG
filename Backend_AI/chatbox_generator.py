import json
from typing import Dict, Any

class ChatboxGenerator:
    def __init__(self):
        self.api_base_url = "http://localhost:8000"
        
    def generate_chatbox_js(self):
        return '''
// HIAST AI Chatbox - Generated by Backend_AI
(function() {
    'use strict';
    
    // Chatbox Configuration
    const CHATBOX_CONFIG = {
        apiUrl: window.location.origin.replace('3000', '8000'),
        maxMessages: 50,
        theme: {
            primary: '#3B82F6',
            secondary: '#1F2937',
            background: '#FFFFFF',
            text: '#1F2937',
            border: '#E5E7EB',
            danger: '#EF4444',
            warning: '#F59E0B'
        }
    };
    
    // Check if user is admin
    function isAdmin() {
        const token = localStorage.getItem('admin_token');
        const user = localStorage.getItem('admin_user');
        
        console.log('Checking admin status:', { token: !!token, user: !!user });
        
        if (!token || !user) {
            console.log('No token or user data found');
            return false;
        }
        
        try {
            const userData = JSON.parse(user);
            console.log('User data:', userData);
            
            // Check multiple possible role structures
            const hasAdminRole = 
                (userData?.Token?.UserRoles?.includes('Admin')) ||
                (userData?.UserRoles?.includes('Admin')) ||
                (userData?.roles?.includes('Admin')) ||
                (userData?.role === 'Admin') ||
                (userData?.Token?.role === 'Admin');
            
            console.log('Has admin role:', hasAdminRole);
            return hasAdminRole || false;
        } catch (e) {
            console.error('Error parsing user data:', e);
            return false;
        }
    }
    
    // Get current website language
    function getCurrentLanguage() {
        // Check html lang attribute
        const htmlLang = document.documentElement.lang;
        if (htmlLang === 'ar') return 'ar';
        if (htmlLang === 'en') return 'en';
        
        // Check for language provider context
        const langProvider = document.querySelector('[data-lang]');
        if (langProvider) {
            const lang = langProvider.getAttribute('data-lang');
            if (lang === 'ar' || lang === 'en') return lang;
        }
        
        // Check localStorage for language preference
        const storedLang = localStorage.getItem('lang');
        if (storedLang === 'ar' || storedLang === 'en') return storedLang;
        
        // Default to English
        return 'en';
    }
    
    // Chatbox HTML Template
    const CHATBOX_HTML = `
        <div id="hiast-chatbox" style="
            position: fixed;
            bottom: 20px;
            left: 20px;
            width: 350px;
            height: 500px;
            background: #FFFFFF;
            border: 2px solid #E5E7EB;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.15);
            z-index: 10000;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: none;
            flex-direction: column;
            transform: translateY(100px) scale(0.8);
            opacity: 0;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        ">
            <!-- Header -->
            <div style="background: #3B82F6; color: white; padding: 15px; border-radius: 10px 10px 0 0; display: flex; justify-content: space-between; align-items: center;">
                <div style="display: flex; align-items: center; gap: 10px;">
                    <div style="width: 32px; height: 32px; background: white; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: bold; color: #3B82F6;">AI</div>
                    <div>
                        <div style="font-weight: bold; font-size: 14px;">HIAST AI Assistant</div>
                        <div style="font-size: 11px; opacity: 0.8;">Ask me anything about HIAST</div>
                    </div>
                </div>
                <button id="chatbox-close" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; padding: 5px;">√ó</button>
            </div>
            
            <!-- Admin Controls (only visible for admins) -->
            <div id="admin-controls" style="
                padding: 10px 15px;
                border-bottom: 1px solid #E5E7EB;
                background: #FEF3C7;
                display: none;
            ">
                <div style="font-size: 12px; font-weight: bold; color: #92400E; margin-bottom: 8px;">üîß Admin Controls</div>
                <div style="display: flex; gap: 8px;">
                    <button id="retrain-model" style="
                        background: #F59E0B;
                        color: white;
                        border: none;
                        padding: 6px 10px;
                        border-radius: 4px;
                        cursor: pointer;
                        font-size: 11px;
                        font-weight: 500;
                        transition: all 0.2s;
                    ">üîÑ Retrain Model</button>
                    <button id="scrape-website" style="
                        background: #EF4444;
                        color: white;
                        border: none;
                        padding: 6px 10px;
                        border-radius: 4px;
                        cursor: pointer;
                        font-size: 11px;
                        font-weight: 500;
                        transition: all 0.2s;
                    ">üåê Scrape Website</button>
                </div>
            </div>
            
            <!-- Messages Container -->
            <div id="chatbox-messages" style="flex: 1; padding: 15px; overflow-y: auto; display: flex; flex-direction: column; gap: 10px;"></div>
            
            <!-- Input Area -->
            <div style="padding: 15px; border-top: 1px solid #E5E7EB; background: #FFFFFF; border-radius: 0 0 10px 10px;">
                <div style="display: flex; gap: 10px;">
                    <input id="chatbox-input" type="text" placeholder="Ask me about HIAST..." style="flex: 1; padding: 10px 12px; border: 1px solid #E5E7EB; border-radius: 6px; font-size: 14px; outline: none;">
                    <button id="chatbox-send" style="background: #3B82F6; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px; font-weight: 500;">Send</button>
                </div>
            </div>
        </div>
        
        <!-- Toggle Button -->
        <div id="chatbox-toggle" style="
            position: fixed;
            bottom: 20px;
            left: 20px;
            width: 60px;
            height: 60px;
            background: #3B82F6;
            border-radius: 50%;
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
            cursor: pointer;
            z-index: 9999;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            animation: pulse 2s infinite;
        ">üí¨</div>
        
        <style>
            @keyframes pulse {
                0% { box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4); }
                50% { box-shadow: 0 4px 20px rgba(59, 130, 246, 0.6); }
                100% { box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4); }
            }
            
            .typing-cursor {
                animation: blink 1s infinite;
                color: #3B82F6;
                font-weight: bold;
            }
            
            @keyframes blink {
                0%, 50% { opacity: 1; }
                51%, 100% { opacity: 0; }
            }
            
            #chatbox-messages a:hover {
                text-decoration: underline !important;
            }
            
            #chatbox-messages strong {
                font-weight: 600 !important;
            }
            
            #chatbox-messages em {
                font-style: italic !important;
            }
            
            #chatbox-messages h4 {
                margin: 8px 0 4px 0 !important;
                font-weight: 600 !important;
                color: #374151 !important;
                font-size: 13px !important;
            }
            
            #chatbox-messages ul {
                margin: 4px 0 !important;
                padding-left: 16px !important;
            }
            
            #chatbox-messages li {
                margin: 2px 0 !important;
                padding-left: 8px !important;
            }
        </style>
    `;
    
    // Chatbox Class
    class HIASTChatbox {
        constructor() {
            this.isOpen = false;
            this.messages = [];
            this.isTyping = false;
            this.isAdmin = isAdmin();
            this.currentLanguage = getCurrentLanguage();
            this.init();
        }
        
        init() {
            document.body.insertAdjacentHTML('beforeend', CHATBOX_HTML);
            
            this.chatbox = document.getElementById('hiast-chatbox');
            this.toggle = document.getElementById('chatbox-toggle');
            this.messagesContainer = document.getElementById('chatbox-messages');
            this.input = document.getElementById('chatbox-input');
            this.sendButton = document.getElementById('chatbox-send');
            this.closeButton = document.getElementById('chatbox-close');
            this.adminControls = document.getElementById('admin-controls');
            this.retrainButton = document.getElementById('retrain-model');
            this.scrapeButton = document.getElementById('scrape-website');
            
            // Show admin controls if user is admin
            console.log('Is admin:', this.isAdmin);
            console.log('Current language:', this.currentLanguage);
            
            if (this.isAdmin) {
                console.log('Showing admin controls');
                this.adminControls.style.display = 'block';
                
                // Admin welcome message based on language
                if (this.currentLanguage === 'ar') {
                    this.addMessage('assistant', 'ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ£ŸäŸáÿß ÿßŸÑŸÖÿØŸäÿ±! üëã ÿ£ŸÜÿß ŸÖÿ≥ÿßÿπÿØ ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ÿßŸÑÿÆÿßÿµ ÿ®ŸÖÿπŸáÿØ ÿ≠ŸÑÿ® ÿßŸÑÿπÿßŸÑŸä. ŸÑÿØŸäŸÉ ÿµŸÑÿßÿ≠Ÿäÿßÿ™ ÿ•ÿØÿßÿ±Ÿäÿ© ŸÑÿ•ÿπÿßÿØÿ© ÿ™ÿØÿ±Ÿäÿ® ÿßŸÑŸÜŸÖŸàÿ∞ÿ¨ Ÿàÿ™ÿ≠ÿØŸäÿ´ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖŸàŸÇÿπ.');
                } else {
                    this.addMessage('assistant', 'Hello Admin! üëã I\\'m your HIAST AI assistant. You have access to admin controls for model retraining and website scraping.');
                }
            } else {
                console.log('Hiding admin controls');
                this.adminControls.style.display = 'none';
                
                // Regular user welcome message based on language
                if (this.currentLanguage === 'ar') {
                    this.addMessage('assistant', 'ŸÖÿ±ÿ≠ÿ®ÿßŸã! ÿ£ŸÜÿß ŸÖÿ≥ÿßÿπÿØ ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ÿßŸÑÿÆÿßÿµ ÿ®ŸÖÿπŸáÿØ ÿ≠ŸÑÿ® ÿßŸÑÿπÿßŸÑŸä. ÿßÿ≥ÿ£ŸÑŸÜŸä ÿ£Ÿä ÿ¥Ÿäÿ° ÿπŸÜ ÿ®ÿ±ÿßŸÖÿ¨ŸÜÿßÿå ÿØŸàÿ±ÿßÿ™ŸÜÿßÿå ÿßŸÑŸÇÿ®ŸàŸÑÿå ÿ£Ÿà ÿ£Ÿä ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ£ÿÆÿ±Ÿâ ÿπŸÜ ÿßŸÑŸÖÿπŸáÿØ ÿßŸÑÿπÿßŸÑŸä ŸÑŸÑÿπŸÑŸàŸÖ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇŸäÿ© ŸàÿßŸÑÿ™ŸÉŸÜŸàŸÑŸàÿ¨Ÿäÿß.');
                } else {
                    this.addMessage('assistant', 'Hello! I\\'m your HIAST AI assistant. Ask me anything about our programs, courses, admissions, or any other information about the Higher Institute for Applied Sciences and Technology.');
                }
            }
            
            this.toggle.addEventListener('click', () => this.toggleChatbox());
            this.closeButton.addEventListener('click', () => this.toggleChatbox());
            this.sendButton.addEventListener('click', () => this.sendMessage());
            this.input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') this.sendMessage();
            });
            
            // Admin button event listeners
            if (this.isAdmin) {
                this.retrainButton.addEventListener('click', () => this.retrainModel());
                this.scrapeButton.addEventListener('click', () => this.scrapeWebsite());
            }
        }
        
        async retrainModel() {
            this.retrainButton.disabled = true;
            this.retrainButton.textContent = 'üîÑ Retraining...';
            this.retrainButton.style.opacity = '0.6';
            
            try {
                const response = await fetch(CHATBOX_CONFIG.apiUrl + '/data/retrain', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    this.addMessage('assistant', '‚úÖ Model retraining completed successfully! The AI model has been updated with the latest data.');
                } else {
                    this.addMessage('assistant', '‚ùå Model retraining failed. Please check the server logs for more details.');
                }
                
            } catch (error) {
                console.error('Retrain error:', error);
                this.addMessage('assistant', '‚ùå Failed to retrain model. Please try again later.');
            }
            
            this.retrainButton.disabled = false;
            this.retrainButton.textContent = 'üîÑ Retrain Model';
            this.retrainButton.style.opacity = '1';
        }
        
        async scrapeWebsite() {
            this.scrapeButton.disabled = true;
            this.scrapeButton.textContent = 'üåê Scraping...';
            this.scrapeButton.style.opacity = '0.6';
            
            try {
                const currentUrl = window.location.origin;
                
                const response = await fetch(CHATBOX_CONFIG.apiUrl + '/data/scrape-url', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        url: currentUrl,
                        max_depth: 1000,
                        output_file: 'scraped_homepage.json'
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    this.addMessage('assistant', '‚úÖ Homepage scraping completed! Scraped content from ' + currentUrl + '. Content length: ' + (data.total_content_length || 0) + ' characters.');
                } else {
                    this.addMessage('assistant', '‚ùå Homepage scraping failed. Please check the server logs for more details.');
                }
                
            } catch (error) {
                console.error('Scrape error:', error);
                this.addMessage('assistant', '‚ùå Failed to scrape homepage. Please try again later.');
            }
            
            this.scrapeButton.disabled = false;
            this.scrapeButton.textContent = 'üåê Scrape Homepage';
            this.scrapeButton.style.opacity = '1';
        }
        
        toggleChatbox() {
            this.isOpen = !this.isOpen;
            
            if (this.isOpen) {
                this.chatbox.style.display = 'flex';
                this.toggle.style.display = 'none';
                
                setTimeout(() => {
                    this.chatbox.style.transform = 'translateY(0) scale(1)';
                    this.chatbox.style.opacity = '1';
                }, 10);
                
                this.input.focus();
            } else {
                this.chatbox.style.transform = 'translateY(100px) scale(0.8)';
                this.chatbox.style.opacity = '0';
                
                setTimeout(() => {
                    this.chatbox.style.display = 'none';
                    this.toggle.style.display = 'flex';
                }, 300);
            }
        }
        
        addMessage(sender, content) {
            const messageDiv = document.createElement('div');
            messageDiv.style.cssText = 'padding: 10px 12px; border-radius: 8px; max-width: 80%; word-wrap: break-word; font-size: 14px; line-height: 1.4; opacity: 0; transform: translateY(10px); transition: all 0.3s ease;';
            
            if (sender === 'user') {
                messageDiv.style.cssText += 'background: #3B82F6; color: white; align-self: flex-end; margin-left: auto;';
                messageDiv.textContent = content;
            } else {
                messageDiv.style.cssText += 'background: #F3F4F6; color: #1F2937; align-self: flex-start;';
                // Format the content for assistant messages
                messageDiv.innerHTML = this.formatMessage(content);
            }
            
            this.messagesContainer.appendChild(messageDiv);
            
            setTimeout(() => {
                messageDiv.style.opacity = '1';
                messageDiv.style.transform = 'translateY(0)';
            }, 10);
            
            this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
            this.messages.push({ sender, content });
        }
        
        formatMessage(content) {
    // Convert markdown-like formatting to HTML
    let formatted = content;
    
    // Markdown headers: # Header -> <h1>Header</h1>
    formatted = formatted.replace(new RegExp('^#\\\\s+(.*?)$', 'gm'), '<h1 style="margin: 16px 0 12px 0; font-weight: 800; color: #111827; font-size: 20px; border-bottom: 3px solid #3B82F6; padding-bottom: 6px;">$1</h1>');
    
    // Markdown headers: ## Header -> <h2>Header</h2>
    formatted = formatted.replace(new RegExp('^##\\\\s+(.*?)$', 'gm'), '<h2 style="margin: 14px 0 10px 0; font-weight: 700; color: #111827; font-size: 18px; border-bottom: 2px solid #6B7280; padding-bottom: 4px;">$1</h2>');
    
    // Markdown headers: ### Header -> <h3>Header</h3>
    formatted = formatted.replace(new RegExp('^###\\\\s+(.*?)$', 'gm'), '<h3 style="margin: 12px 0 8px 0; font-weight: 700; color: #111827; font-size: 16px; border-bottom: 2px solid #E5E7EB; padding-bottom: 4px;">$1</h3>');
    
    // Bold text: **text** -> <strong>text</strong>
    formatted = formatted.replace(new RegExp('\\\\*\\\\*(.*?)\\\\*\\\\*', 'g'), '<strong style="font-weight: 600; color: #1F2937;">$1</strong>');
    
    // Italic text: *text* -> <em>text</em>
    formatted = formatted.replace(new RegExp('\\\\*(.*?)\\\\*', 'g'), '<em style="font-style: italic; color: #6B7280;">$1</em>');
    
    // Headers: **Header:** -> <h4>Header:</h4>
    formatted = formatted.replace(new RegExp('\\\\*\\\\*(.*?):\\\\*\\\\*', 'g'), '<h4 style="margin: 8px 0 4px 0; font-weight: 600; color: #374151; font-size: 13px;">$1:</h4>');
    
    // Lists: * item -> <li>item</li>
    formatted = formatted.replace(new RegExp('^\\\\s*\\\\*\\\\s*(.*?)$', 'gm'), '<li style="margin: 2px 0; padding-left: 8px;">$1</li>');
    
    // Email addresses: make them clickable
    formatted = formatted.replace(new RegExp('([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,})', 'g'), '<a href="mailto:$1" style="color: #3B82F6; text-decoration: none; font-weight: 500;">$1</a>');
    
    // Phone numbers: make them clickable
    formatted = formatted.replace(new RegExp('(\\\\+\\\\d{1,3}-\\\\d{1,4}-\\\\d{6,8})', 'g'), '<a href="tel:$1" style="color: #059669; text-decoration: none; font-weight: 500;">$1</a>');
    
    // Line breaks
    formatted = formatted.replace(new RegExp('\\\\n', 'g'), '<br>');
    
    // Wrap lists in ul tags
    if (formatted.includes('<li>')) {
        formatted = formatted.replace(new RegExp('(<li.*?</li>)', 'g'), '<ul style="margin: 4px 0; padding-left: 16px;">$1</ul>');
    }
    
    return formatted;
}
        
        async addStreamingMessage(sender, content) {
            const messageDiv = document.createElement('div');
            messageDiv.style.cssText = 'padding: 10px 12px; border-radius: 8px; max-width: 80%; word-wrap: break-word; font-size: 14px; line-height: 1.4; opacity: 0; transform: translateY(10px); transition: all 0.3s ease;';
            
            if (sender === 'user') {
                messageDiv.style.cssText += 'background: #3B82F6; color: white; align-self: flex-end; margin-left: auto;';
                messageDiv.textContent = content;
            } else {
                messageDiv.style.cssText += 'background: #F3F4F6; color: #1F2937; align-self: flex-start;';
                messageDiv.innerHTML = '<span class="typing-cursor">|</span>';
            }
            
            this.messagesContainer.appendChild(messageDiv);
            
            setTimeout(() => {
                messageDiv.style.opacity = '1';
                messageDiv.style.transform = 'translateY(0)';
            }, 10);
            
            this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
            
            // Stream the content
            if (sender === 'assistant') {
                await this.streamContent(messageDiv, content);
            }
            
            this.messages.push({ sender, content });
        }
        
        async streamContent(messageDiv, content) {
            const words = content.split(' ');
            let currentText = '';
            
            for (let i = 0; i < words.length; i++) {
                currentText += (i > 0 ? ' ' : '') + words[i];
                messageDiv.innerHTML = this.formatMessage(currentText) + '<span class="typing-cursor">|</span>';
                
                // Scroll to bottom
                this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
                
                // Random delay between 30-80ms for natural typing effect
                await new Promise(resolve => setTimeout(resolve, Math.random() * 50 + 30));
            }
            
            // Remove cursor when done
            messageDiv.innerHTML = this.formatMessage(content);
        }
        
        async sendMessage() {
            const message = this.input.value.trim();
            if (!message || this.isTyping) return;
            
            this.addMessage('user', message);
            this.input.value = '';
            
            this.isTyping = true;
            const typingDiv = document.createElement('div');
            typingDiv.id = 'typing-indicator';
            typingDiv.style.cssText = 'padding: 10px 12px; border-radius: 8px; background: #F3F4F6; color: #1F2937; align-self: flex-start; font-style: italic; opacity: 0.7;';
            typingDiv.textContent = 'AI is thinking...';
            this.messagesContainer.appendChild(typingDiv);
            this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
            
            try {
                const response = await fetch(CHATBOX_CONFIG.apiUrl + '/conversation', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ question: message })
                });
                
                const data = await response.json();
                
                if (typingDiv.parentNode) {
                    typingDiv.parentNode.removeChild(typingDiv);
                }
                
                if (data.answer) {
                    // Use streaming message for better UX
                    await this.addStreamingMessage('assistant', data.answer);
                } else {
                    await this.addStreamingMessage('assistant', 'Sorry, I couldn\\'t process your request. Please try again.');
                }
                
            } catch (error) {
                console.error('Chatbox error:', error);
                
                if (typingDiv.parentNode) {
                    typingDiv.parentNode.removeChild(typingDiv);
                }
                
                await this.addStreamingMessage('assistant', 'Sorry, I\\'m having trouble connecting to the AI service. Please try again later.');
            }
            
            this.isTyping = false;
        }
    }
    
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            new HIASTChatbox();
        });
    } else {
        new HIASTChatbox();
    }
    
})();
        '''
    
    def get_chatbox_config(self):
        return {
            "api_url": self.api_base_url,
            "features": ["real_time_typing", "message_history", "auto_focus", "admin_controls"],
            "styling": {"theme": "modern", "position": "bottom-left"}
        }

# Usage example
if __name__ == "__main__":
    generator = ChatboxGenerator()
    print("Generated JavaScript code:")
    print(generator.generate_chatbox_js()) 